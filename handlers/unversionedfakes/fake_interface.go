// This file was generated by counterfeiter
package unversionedfakes

import (
	"sync"

	"k8s.io/kubernetes/pkg/client/typed/discovery"
	"k8s.io/kubernetes/pkg/client/unversioned"
)

type FakeInterface struct {
	PodsStub        func(namespace string) unversioned.PodInterface
	podsMutex       sync.RWMutex
	podsArgsForCall []struct {
		namespace string
	}
	podsReturns struct {
		result1 unversioned.PodInterface
	}
	PodTemplatesStub        func(namespace string) unversioned.PodTemplateInterface
	podTemplatesMutex       sync.RWMutex
	podTemplatesArgsForCall []struct {
		namespace string
	}
	podTemplatesReturns struct {
		result1 unversioned.PodTemplateInterface
	}
	ReplicationControllersStub        func(namespace string) unversioned.ReplicationControllerInterface
	replicationControllersMutex       sync.RWMutex
	replicationControllersArgsForCall []struct {
		namespace string
	}
	replicationControllersReturns struct {
		result1 unversioned.ReplicationControllerInterface
	}
	ServicesStub        func(namespace string) unversioned.ServiceInterface
	servicesMutex       sync.RWMutex
	servicesArgsForCall []struct {
		namespace string
	}
	servicesReturns struct {
		result1 unversioned.ServiceInterface
	}
	EndpointsStub        func(namespace string) unversioned.EndpointsInterface
	endpointsMutex       sync.RWMutex
	endpointsArgsForCall []struct {
		namespace string
	}
	endpointsReturns struct {
		result1 unversioned.EndpointsInterface
	}
	NodesStub        func() unversioned.NodeInterface
	nodesMutex       sync.RWMutex
	nodesArgsForCall []struct{}
	nodesReturns     struct {
		result1 unversioned.NodeInterface
	}
	EventsStub        func(namespace string) unversioned.EventInterface
	eventsMutex       sync.RWMutex
	eventsArgsForCall []struct {
		namespace string
	}
	eventsReturns struct {
		result1 unversioned.EventInterface
	}
	LimitRangesStub        func(namespace string) unversioned.LimitRangeInterface
	limitRangesMutex       sync.RWMutex
	limitRangesArgsForCall []struct {
		namespace string
	}
	limitRangesReturns struct {
		result1 unversioned.LimitRangeInterface
	}
	ResourceQuotasStub        func(namespace string) unversioned.ResourceQuotaInterface
	resourceQuotasMutex       sync.RWMutex
	resourceQuotasArgsForCall []struct {
		namespace string
	}
	resourceQuotasReturns struct {
		result1 unversioned.ResourceQuotaInterface
	}
	ServiceAccountsStub        func(namespace string) unversioned.ServiceAccountsInterface
	serviceAccountsMutex       sync.RWMutex
	serviceAccountsArgsForCall []struct {
		namespace string
	}
	serviceAccountsReturns struct {
		result1 unversioned.ServiceAccountsInterface
	}
	SecretsStub        func(namespace string) unversioned.SecretsInterface
	secretsMutex       sync.RWMutex
	secretsArgsForCall []struct {
		namespace string
	}
	secretsReturns struct {
		result1 unversioned.SecretsInterface
	}
	NamespacesStub        func() unversioned.NamespaceInterface
	namespacesMutex       sync.RWMutex
	namespacesArgsForCall []struct{}
	namespacesReturns     struct {
		result1 unversioned.NamespaceInterface
	}
	PersistentVolumesStub        func() unversioned.PersistentVolumeInterface
	persistentVolumesMutex       sync.RWMutex
	persistentVolumesArgsForCall []struct{}
	persistentVolumesReturns     struct {
		result1 unversioned.PersistentVolumeInterface
	}
	PersistentVolumeClaimsStub        func(namespace string) unversioned.PersistentVolumeClaimInterface
	persistentVolumeClaimsMutex       sync.RWMutex
	persistentVolumeClaimsArgsForCall []struct {
		namespace string
	}
	persistentVolumeClaimsReturns struct {
		result1 unversioned.PersistentVolumeClaimInterface
	}
	ComponentStatusesStub        func() unversioned.ComponentStatusInterface
	componentStatusesMutex       sync.RWMutex
	componentStatusesArgsForCall []struct{}
	componentStatusesReturns     struct {
		result1 unversioned.ComponentStatusInterface
	}
	ConfigMapsStub        func(namespace string) unversioned.ConfigMapsInterface
	configMapsMutex       sync.RWMutex
	configMapsArgsForCall []struct {
		namespace string
	}
	configMapsReturns struct {
		result1 unversioned.ConfigMapsInterface
	}
	AutoscalingStub        func() unversioned.AutoscalingInterface
	autoscalingMutex       sync.RWMutex
	autoscalingArgsForCall []struct{}
	autoscalingReturns     struct {
		result1 unversioned.AutoscalingInterface
	}
	BatchStub        func() unversioned.BatchInterface
	batchMutex       sync.RWMutex
	batchArgsForCall []struct{}
	batchReturns     struct {
		result1 unversioned.BatchInterface
	}
	ExtensionsStub        func() unversioned.ExtensionsInterface
	extensionsMutex       sync.RWMutex
	extensionsArgsForCall []struct{}
	extensionsReturns     struct {
		result1 unversioned.ExtensionsInterface
	}
	RbacStub        func() unversioned.RbacInterface
	rbacMutex       sync.RWMutex
	rbacArgsForCall []struct{}
	rbacReturns     struct {
		result1 unversioned.RbacInterface
	}
	DiscoveryStub        func() discovery.DiscoveryInterface
	discoveryMutex       sync.RWMutex
	discoveryArgsForCall []struct{}
	discoveryReturns     struct {
		result1 discovery.DiscoveryInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterface) Pods(namespace string) unversioned.PodInterface {
	fake.podsMutex.Lock()
	fake.podsArgsForCall = append(fake.podsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Pods", []interface{}{namespace})
	fake.podsMutex.Unlock()
	if fake.PodsStub != nil {
		return fake.PodsStub(namespace)
	} else {
		return fake.podsReturns.result1
	}
}

func (fake *FakeInterface) PodsCallCount() int {
	fake.podsMutex.RLock()
	defer fake.podsMutex.RUnlock()
	return len(fake.podsArgsForCall)
}

func (fake *FakeInterface) PodsArgsForCall(i int) string {
	fake.podsMutex.RLock()
	defer fake.podsMutex.RUnlock()
	return fake.podsArgsForCall[i].namespace
}

func (fake *FakeInterface) PodsReturns(result1 unversioned.PodInterface) {
	fake.PodsStub = nil
	fake.podsReturns = struct {
		result1 unversioned.PodInterface
	}{result1}
}

func (fake *FakeInterface) PodTemplates(namespace string) unversioned.PodTemplateInterface {
	fake.podTemplatesMutex.Lock()
	fake.podTemplatesArgsForCall = append(fake.podTemplatesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("PodTemplates", []interface{}{namespace})
	fake.podTemplatesMutex.Unlock()
	if fake.PodTemplatesStub != nil {
		return fake.PodTemplatesStub(namespace)
	} else {
		return fake.podTemplatesReturns.result1
	}
}

func (fake *FakeInterface) PodTemplatesCallCount() int {
	fake.podTemplatesMutex.RLock()
	defer fake.podTemplatesMutex.RUnlock()
	return len(fake.podTemplatesArgsForCall)
}

func (fake *FakeInterface) PodTemplatesArgsForCall(i int) string {
	fake.podTemplatesMutex.RLock()
	defer fake.podTemplatesMutex.RUnlock()
	return fake.podTemplatesArgsForCall[i].namespace
}

func (fake *FakeInterface) PodTemplatesReturns(result1 unversioned.PodTemplateInterface) {
	fake.PodTemplatesStub = nil
	fake.podTemplatesReturns = struct {
		result1 unversioned.PodTemplateInterface
	}{result1}
}

func (fake *FakeInterface) ReplicationControllers(namespace string) unversioned.ReplicationControllerInterface {
	fake.replicationControllersMutex.Lock()
	fake.replicationControllersArgsForCall = append(fake.replicationControllersArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ReplicationControllers", []interface{}{namespace})
	fake.replicationControllersMutex.Unlock()
	if fake.ReplicationControllersStub != nil {
		return fake.ReplicationControllersStub(namespace)
	} else {
		return fake.replicationControllersReturns.result1
	}
}

func (fake *FakeInterface) ReplicationControllersCallCount() int {
	fake.replicationControllersMutex.RLock()
	defer fake.replicationControllersMutex.RUnlock()
	return len(fake.replicationControllersArgsForCall)
}

func (fake *FakeInterface) ReplicationControllersArgsForCall(i int) string {
	fake.replicationControllersMutex.RLock()
	defer fake.replicationControllersMutex.RUnlock()
	return fake.replicationControllersArgsForCall[i].namespace
}

func (fake *FakeInterface) ReplicationControllersReturns(result1 unversioned.ReplicationControllerInterface) {
	fake.ReplicationControllersStub = nil
	fake.replicationControllersReturns = struct {
		result1 unversioned.ReplicationControllerInterface
	}{result1}
}

func (fake *FakeInterface) Services(namespace string) unversioned.ServiceInterface {
	fake.servicesMutex.Lock()
	fake.servicesArgsForCall = append(fake.servicesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Services", []interface{}{namespace})
	fake.servicesMutex.Unlock()
	if fake.ServicesStub != nil {
		return fake.ServicesStub(namespace)
	} else {
		return fake.servicesReturns.result1
	}
}

func (fake *FakeInterface) ServicesCallCount() int {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return len(fake.servicesArgsForCall)
}

func (fake *FakeInterface) ServicesArgsForCall(i int) string {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return fake.servicesArgsForCall[i].namespace
}

func (fake *FakeInterface) ServicesReturns(result1 unversioned.ServiceInterface) {
	fake.ServicesStub = nil
	fake.servicesReturns = struct {
		result1 unversioned.ServiceInterface
	}{result1}
}

func (fake *FakeInterface) Endpoints(namespace string) unversioned.EndpointsInterface {
	fake.endpointsMutex.Lock()
	fake.endpointsArgsForCall = append(fake.endpointsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Endpoints", []interface{}{namespace})
	fake.endpointsMutex.Unlock()
	if fake.EndpointsStub != nil {
		return fake.EndpointsStub(namespace)
	} else {
		return fake.endpointsReturns.result1
	}
}

func (fake *FakeInterface) EndpointsCallCount() int {
	fake.endpointsMutex.RLock()
	defer fake.endpointsMutex.RUnlock()
	return len(fake.endpointsArgsForCall)
}

func (fake *FakeInterface) EndpointsArgsForCall(i int) string {
	fake.endpointsMutex.RLock()
	defer fake.endpointsMutex.RUnlock()
	return fake.endpointsArgsForCall[i].namespace
}

func (fake *FakeInterface) EndpointsReturns(result1 unversioned.EndpointsInterface) {
	fake.EndpointsStub = nil
	fake.endpointsReturns = struct {
		result1 unversioned.EndpointsInterface
	}{result1}
}

func (fake *FakeInterface) Nodes() unversioned.NodeInterface {
	fake.nodesMutex.Lock()
	fake.nodesArgsForCall = append(fake.nodesArgsForCall, struct{}{})
	fake.recordInvocation("Nodes", []interface{}{})
	fake.nodesMutex.Unlock()
	if fake.NodesStub != nil {
		return fake.NodesStub()
	} else {
		return fake.nodesReturns.result1
	}
}

func (fake *FakeInterface) NodesCallCount() int {
	fake.nodesMutex.RLock()
	defer fake.nodesMutex.RUnlock()
	return len(fake.nodesArgsForCall)
}

func (fake *FakeInterface) NodesReturns(result1 unversioned.NodeInterface) {
	fake.NodesStub = nil
	fake.nodesReturns = struct {
		result1 unversioned.NodeInterface
	}{result1}
}

func (fake *FakeInterface) Events(namespace string) unversioned.EventInterface {
	fake.eventsMutex.Lock()
	fake.eventsArgsForCall = append(fake.eventsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Events", []interface{}{namespace})
	fake.eventsMutex.Unlock()
	if fake.EventsStub != nil {
		return fake.EventsStub(namespace)
	} else {
		return fake.eventsReturns.result1
	}
}

func (fake *FakeInterface) EventsCallCount() int {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return len(fake.eventsArgsForCall)
}

func (fake *FakeInterface) EventsArgsForCall(i int) string {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return fake.eventsArgsForCall[i].namespace
}

func (fake *FakeInterface) EventsReturns(result1 unversioned.EventInterface) {
	fake.EventsStub = nil
	fake.eventsReturns = struct {
		result1 unversioned.EventInterface
	}{result1}
}

func (fake *FakeInterface) LimitRanges(namespace string) unversioned.LimitRangeInterface {
	fake.limitRangesMutex.Lock()
	fake.limitRangesArgsForCall = append(fake.limitRangesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("LimitRanges", []interface{}{namespace})
	fake.limitRangesMutex.Unlock()
	if fake.LimitRangesStub != nil {
		return fake.LimitRangesStub(namespace)
	} else {
		return fake.limitRangesReturns.result1
	}
}

func (fake *FakeInterface) LimitRangesCallCount() int {
	fake.limitRangesMutex.RLock()
	defer fake.limitRangesMutex.RUnlock()
	return len(fake.limitRangesArgsForCall)
}

func (fake *FakeInterface) LimitRangesArgsForCall(i int) string {
	fake.limitRangesMutex.RLock()
	defer fake.limitRangesMutex.RUnlock()
	return fake.limitRangesArgsForCall[i].namespace
}

func (fake *FakeInterface) LimitRangesReturns(result1 unversioned.LimitRangeInterface) {
	fake.LimitRangesStub = nil
	fake.limitRangesReturns = struct {
		result1 unversioned.LimitRangeInterface
	}{result1}
}

func (fake *FakeInterface) ResourceQuotas(namespace string) unversioned.ResourceQuotaInterface {
	fake.resourceQuotasMutex.Lock()
	fake.resourceQuotasArgsForCall = append(fake.resourceQuotasArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ResourceQuotas", []interface{}{namespace})
	fake.resourceQuotasMutex.Unlock()
	if fake.ResourceQuotasStub != nil {
		return fake.ResourceQuotasStub(namespace)
	} else {
		return fake.resourceQuotasReturns.result1
	}
}

func (fake *FakeInterface) ResourceQuotasCallCount() int {
	fake.resourceQuotasMutex.RLock()
	defer fake.resourceQuotasMutex.RUnlock()
	return len(fake.resourceQuotasArgsForCall)
}

func (fake *FakeInterface) ResourceQuotasArgsForCall(i int) string {
	fake.resourceQuotasMutex.RLock()
	defer fake.resourceQuotasMutex.RUnlock()
	return fake.resourceQuotasArgsForCall[i].namespace
}

func (fake *FakeInterface) ResourceQuotasReturns(result1 unversioned.ResourceQuotaInterface) {
	fake.ResourceQuotasStub = nil
	fake.resourceQuotasReturns = struct {
		result1 unversioned.ResourceQuotaInterface
	}{result1}
}

func (fake *FakeInterface) ServiceAccounts(namespace string) unversioned.ServiceAccountsInterface {
	fake.serviceAccountsMutex.Lock()
	fake.serviceAccountsArgsForCall = append(fake.serviceAccountsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ServiceAccounts", []interface{}{namespace})
	fake.serviceAccountsMutex.Unlock()
	if fake.ServiceAccountsStub != nil {
		return fake.ServiceAccountsStub(namespace)
	} else {
		return fake.serviceAccountsReturns.result1
	}
}

func (fake *FakeInterface) ServiceAccountsCallCount() int {
	fake.serviceAccountsMutex.RLock()
	defer fake.serviceAccountsMutex.RUnlock()
	return len(fake.serviceAccountsArgsForCall)
}

func (fake *FakeInterface) ServiceAccountsArgsForCall(i int) string {
	fake.serviceAccountsMutex.RLock()
	defer fake.serviceAccountsMutex.RUnlock()
	return fake.serviceAccountsArgsForCall[i].namespace
}

func (fake *FakeInterface) ServiceAccountsReturns(result1 unversioned.ServiceAccountsInterface) {
	fake.ServiceAccountsStub = nil
	fake.serviceAccountsReturns = struct {
		result1 unversioned.ServiceAccountsInterface
	}{result1}
}

func (fake *FakeInterface) Secrets(namespace string) unversioned.SecretsInterface {
	fake.secretsMutex.Lock()
	fake.secretsArgsForCall = append(fake.secretsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Secrets", []interface{}{namespace})
	fake.secretsMutex.Unlock()
	if fake.SecretsStub != nil {
		return fake.SecretsStub(namespace)
	} else {
		return fake.secretsReturns.result1
	}
}

func (fake *FakeInterface) SecretsCallCount() int {
	fake.secretsMutex.RLock()
	defer fake.secretsMutex.RUnlock()
	return len(fake.secretsArgsForCall)
}

func (fake *FakeInterface) SecretsArgsForCall(i int) string {
	fake.secretsMutex.RLock()
	defer fake.secretsMutex.RUnlock()
	return fake.secretsArgsForCall[i].namespace
}

func (fake *FakeInterface) SecretsReturns(result1 unversioned.SecretsInterface) {
	fake.SecretsStub = nil
	fake.secretsReturns = struct {
		result1 unversioned.SecretsInterface
	}{result1}
}

func (fake *FakeInterface) Namespaces() unversioned.NamespaceInterface {
	fake.namespacesMutex.Lock()
	fake.namespacesArgsForCall = append(fake.namespacesArgsForCall, struct{}{})
	fake.recordInvocation("Namespaces", []interface{}{})
	fake.namespacesMutex.Unlock()
	if fake.NamespacesStub != nil {
		return fake.NamespacesStub()
	} else {
		return fake.namespacesReturns.result1
	}
}

func (fake *FakeInterface) NamespacesCallCount() int {
	fake.namespacesMutex.RLock()
	defer fake.namespacesMutex.RUnlock()
	return len(fake.namespacesArgsForCall)
}

func (fake *FakeInterface) NamespacesReturns(result1 unversioned.NamespaceInterface) {
	fake.NamespacesStub = nil
	fake.namespacesReturns = struct {
		result1 unversioned.NamespaceInterface
	}{result1}
}

func (fake *FakeInterface) PersistentVolumes() unversioned.PersistentVolumeInterface {
	fake.persistentVolumesMutex.Lock()
	fake.persistentVolumesArgsForCall = append(fake.persistentVolumesArgsForCall, struct{}{})
	fake.recordInvocation("PersistentVolumes", []interface{}{})
	fake.persistentVolumesMutex.Unlock()
	if fake.PersistentVolumesStub != nil {
		return fake.PersistentVolumesStub()
	} else {
		return fake.persistentVolumesReturns.result1
	}
}

func (fake *FakeInterface) PersistentVolumesCallCount() int {
	fake.persistentVolumesMutex.RLock()
	defer fake.persistentVolumesMutex.RUnlock()
	return len(fake.persistentVolumesArgsForCall)
}

func (fake *FakeInterface) PersistentVolumesReturns(result1 unversioned.PersistentVolumeInterface) {
	fake.PersistentVolumesStub = nil
	fake.persistentVolumesReturns = struct {
		result1 unversioned.PersistentVolumeInterface
	}{result1}
}

func (fake *FakeInterface) PersistentVolumeClaims(namespace string) unversioned.PersistentVolumeClaimInterface {
	fake.persistentVolumeClaimsMutex.Lock()
	fake.persistentVolumeClaimsArgsForCall = append(fake.persistentVolumeClaimsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("PersistentVolumeClaims", []interface{}{namespace})
	fake.persistentVolumeClaimsMutex.Unlock()
	if fake.PersistentVolumeClaimsStub != nil {
		return fake.PersistentVolumeClaimsStub(namespace)
	} else {
		return fake.persistentVolumeClaimsReturns.result1
	}
}

func (fake *FakeInterface) PersistentVolumeClaimsCallCount() int {
	fake.persistentVolumeClaimsMutex.RLock()
	defer fake.persistentVolumeClaimsMutex.RUnlock()
	return len(fake.persistentVolumeClaimsArgsForCall)
}

func (fake *FakeInterface) PersistentVolumeClaimsArgsForCall(i int) string {
	fake.persistentVolumeClaimsMutex.RLock()
	defer fake.persistentVolumeClaimsMutex.RUnlock()
	return fake.persistentVolumeClaimsArgsForCall[i].namespace
}

func (fake *FakeInterface) PersistentVolumeClaimsReturns(result1 unversioned.PersistentVolumeClaimInterface) {
	fake.PersistentVolumeClaimsStub = nil
	fake.persistentVolumeClaimsReturns = struct {
		result1 unversioned.PersistentVolumeClaimInterface
	}{result1}
}

func (fake *FakeInterface) ComponentStatuses() unversioned.ComponentStatusInterface {
	fake.componentStatusesMutex.Lock()
	fake.componentStatusesArgsForCall = append(fake.componentStatusesArgsForCall, struct{}{})
	fake.recordInvocation("ComponentStatuses", []interface{}{})
	fake.componentStatusesMutex.Unlock()
	if fake.ComponentStatusesStub != nil {
		return fake.ComponentStatusesStub()
	} else {
		return fake.componentStatusesReturns.result1
	}
}

func (fake *FakeInterface) ComponentStatusesCallCount() int {
	fake.componentStatusesMutex.RLock()
	defer fake.componentStatusesMutex.RUnlock()
	return len(fake.componentStatusesArgsForCall)
}

func (fake *FakeInterface) ComponentStatusesReturns(result1 unversioned.ComponentStatusInterface) {
	fake.ComponentStatusesStub = nil
	fake.componentStatusesReturns = struct {
		result1 unversioned.ComponentStatusInterface
	}{result1}
}

func (fake *FakeInterface) ConfigMaps(namespace string) unversioned.ConfigMapsInterface {
	fake.configMapsMutex.Lock()
	fake.configMapsArgsForCall = append(fake.configMapsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ConfigMaps", []interface{}{namespace})
	fake.configMapsMutex.Unlock()
	if fake.ConfigMapsStub != nil {
		return fake.ConfigMapsStub(namespace)
	} else {
		return fake.configMapsReturns.result1
	}
}

func (fake *FakeInterface) ConfigMapsCallCount() int {
	fake.configMapsMutex.RLock()
	defer fake.configMapsMutex.RUnlock()
	return len(fake.configMapsArgsForCall)
}

func (fake *FakeInterface) ConfigMapsArgsForCall(i int) string {
	fake.configMapsMutex.RLock()
	defer fake.configMapsMutex.RUnlock()
	return fake.configMapsArgsForCall[i].namespace
}

func (fake *FakeInterface) ConfigMapsReturns(result1 unversioned.ConfigMapsInterface) {
	fake.ConfigMapsStub = nil
	fake.configMapsReturns = struct {
		result1 unversioned.ConfigMapsInterface
	}{result1}
}

func (fake *FakeInterface) Autoscaling() unversioned.AutoscalingInterface {
	fake.autoscalingMutex.Lock()
	fake.autoscalingArgsForCall = append(fake.autoscalingArgsForCall, struct{}{})
	fake.recordInvocation("Autoscaling", []interface{}{})
	fake.autoscalingMutex.Unlock()
	if fake.AutoscalingStub != nil {
		return fake.AutoscalingStub()
	} else {
		return fake.autoscalingReturns.result1
	}
}

func (fake *FakeInterface) AutoscalingCallCount() int {
	fake.autoscalingMutex.RLock()
	defer fake.autoscalingMutex.RUnlock()
	return len(fake.autoscalingArgsForCall)
}

func (fake *FakeInterface) AutoscalingReturns(result1 unversioned.AutoscalingInterface) {
	fake.AutoscalingStub = nil
	fake.autoscalingReturns = struct {
		result1 unversioned.AutoscalingInterface
	}{result1}
}

func (fake *FakeInterface) Batch() unversioned.BatchInterface {
	fake.batchMutex.Lock()
	fake.batchArgsForCall = append(fake.batchArgsForCall, struct{}{})
	fake.recordInvocation("Batch", []interface{}{})
	fake.batchMutex.Unlock()
	if fake.BatchStub != nil {
		return fake.BatchStub()
	} else {
		return fake.batchReturns.result1
	}
}

func (fake *FakeInterface) BatchCallCount() int {
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	return len(fake.batchArgsForCall)
}

func (fake *FakeInterface) BatchReturns(result1 unversioned.BatchInterface) {
	fake.BatchStub = nil
	fake.batchReturns = struct {
		result1 unversioned.BatchInterface
	}{result1}
}

func (fake *FakeInterface) Extensions() unversioned.ExtensionsInterface {
	fake.extensionsMutex.Lock()
	fake.extensionsArgsForCall = append(fake.extensionsArgsForCall, struct{}{})
	fake.recordInvocation("Extensions", []interface{}{})
	fake.extensionsMutex.Unlock()
	if fake.ExtensionsStub != nil {
		return fake.ExtensionsStub()
	} else {
		return fake.extensionsReturns.result1
	}
}

func (fake *FakeInterface) ExtensionsCallCount() int {
	fake.extensionsMutex.RLock()
	defer fake.extensionsMutex.RUnlock()
	return len(fake.extensionsArgsForCall)
}

func (fake *FakeInterface) ExtensionsReturns(result1 unversioned.ExtensionsInterface) {
	fake.ExtensionsStub = nil
	fake.extensionsReturns = struct {
		result1 unversioned.ExtensionsInterface
	}{result1}
}

func (fake *FakeInterface) Rbac() unversioned.RbacInterface {
	fake.rbacMutex.Lock()
	fake.rbacArgsForCall = append(fake.rbacArgsForCall, struct{}{})
	fake.recordInvocation("Rbac", []interface{}{})
	fake.rbacMutex.Unlock()
	if fake.RbacStub != nil {
		return fake.RbacStub()
	} else {
		return fake.rbacReturns.result1
	}
}

func (fake *FakeInterface) RbacCallCount() int {
	fake.rbacMutex.RLock()
	defer fake.rbacMutex.RUnlock()
	return len(fake.rbacArgsForCall)
}

func (fake *FakeInterface) RbacReturns(result1 unversioned.RbacInterface) {
	fake.RbacStub = nil
	fake.rbacReturns = struct {
		result1 unversioned.RbacInterface
	}{result1}
}

func (fake *FakeInterface) Discovery() discovery.DiscoveryInterface {
	fake.discoveryMutex.Lock()
	fake.discoveryArgsForCall = append(fake.discoveryArgsForCall, struct{}{})
	fake.recordInvocation("Discovery", []interface{}{})
	fake.discoveryMutex.Unlock()
	if fake.DiscoveryStub != nil {
		return fake.DiscoveryStub()
	} else {
		return fake.discoveryReturns.result1
	}
}

func (fake *FakeInterface) DiscoveryCallCount() int {
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return len(fake.discoveryArgsForCall)
}

func (fake *FakeInterface) DiscoveryReturns(result1 discovery.DiscoveryInterface) {
	fake.DiscoveryStub = nil
	fake.discoveryReturns = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *FakeInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.podsMutex.RLock()
	defer fake.podsMutex.RUnlock()
	fake.podTemplatesMutex.RLock()
	defer fake.podTemplatesMutex.RUnlock()
	fake.replicationControllersMutex.RLock()
	defer fake.replicationControllersMutex.RUnlock()
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	fake.endpointsMutex.RLock()
	defer fake.endpointsMutex.RUnlock()
	fake.nodesMutex.RLock()
	defer fake.nodesMutex.RUnlock()
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	fake.limitRangesMutex.RLock()
	defer fake.limitRangesMutex.RUnlock()
	fake.resourceQuotasMutex.RLock()
	defer fake.resourceQuotasMutex.RUnlock()
	fake.serviceAccountsMutex.RLock()
	defer fake.serviceAccountsMutex.RUnlock()
	fake.secretsMutex.RLock()
	defer fake.secretsMutex.RUnlock()
	fake.namespacesMutex.RLock()
	defer fake.namespacesMutex.RUnlock()
	fake.persistentVolumesMutex.RLock()
	defer fake.persistentVolumesMutex.RUnlock()
	fake.persistentVolumeClaimsMutex.RLock()
	defer fake.persistentVolumeClaimsMutex.RUnlock()
	fake.componentStatusesMutex.RLock()
	defer fake.componentStatusesMutex.RUnlock()
	fake.configMapsMutex.RLock()
	defer fake.configMapsMutex.RUnlock()
	fake.autoscalingMutex.RLock()
	defer fake.autoscalingMutex.RUnlock()
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	fake.extensionsMutex.RLock()
	defer fake.extensionsMutex.RUnlock()
	fake.rbacMutex.RLock()
	defer fake.rbacMutex.RUnlock()
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ unversioned.Interface = new(FakeInterface)
