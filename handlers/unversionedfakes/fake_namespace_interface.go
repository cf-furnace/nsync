// This file was generated by counterfeiter
package unversionedfakes

import (
	"sync"

	"k8s.io/kubernetes/pkg/api"
	"k8s.io/kubernetes/pkg/client/unversioned"
	"k8s.io/kubernetes/pkg/watch"
)

type FakeNamespaceInterface struct {
	CreateStub        func(item *api.Namespace) (*api.Namespace, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		item *api.Namespace
	}
	createReturns struct {
		result1 *api.Namespace
		result2 error
	}
	GetStub        func(name string) (result *api.Namespace, err error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		name string
	}
	getReturns struct {
		result1 *api.Namespace
		result2 error
	}
	ListStub        func(opts api.ListOptions) (*api.NamespaceList, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		opts api.ListOptions
	}
	listReturns struct {
		result1 *api.NamespaceList
		result2 error
	}
	DeleteStub        func(name string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		name string
	}
	deleteReturns struct {
		result1 error
	}
	UpdateStub        func(item *api.Namespace) (*api.Namespace, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		item *api.Namespace
	}
	updateReturns struct {
		result1 *api.Namespace
		result2 error
	}
	WatchStub        func(opts api.ListOptions) (watch.Interface, error)
	watchMutex       sync.RWMutex
	watchArgsForCall []struct {
		opts api.ListOptions
	}
	watchReturns struct {
		result1 watch.Interface
		result2 error
	}
	FinalizeStub        func(item *api.Namespace) (*api.Namespace, error)
	finalizeMutex       sync.RWMutex
	finalizeArgsForCall []struct {
		item *api.Namespace
	}
	finalizeReturns struct {
		result1 *api.Namespace
		result2 error
	}
	StatusStub        func(item *api.Namespace) (*api.Namespace, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		item *api.Namespace
	}
	statusReturns struct {
		result1 *api.Namespace
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespaceInterface) Create(item *api.Namespace) (*api.Namespace, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		item *api.Namespace
	}{item})
	fake.recordInvocation("Create", []interface{}{item})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(item)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeNamespaceInterface) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeNamespaceInterface) CreateArgsForCall(i int) *api.Namespace {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].item
}

func (fake *FakeNamespaceInterface) CreateReturns(result1 *api.Namespace, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *api.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) Get(name string) (result *api.Namespace, err error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Get", []interface{}{name})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(name)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeNamespaceInterface) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeNamespaceInterface) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].name
}

func (fake *FakeNamespaceInterface) GetReturns(result1 *api.Namespace, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *api.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) List(opts api.ListOptions) (*api.NamespaceList, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		opts api.ListOptions
	}{opts})
	fake.recordInvocation("List", []interface{}{opts})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(opts)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeNamespaceInterface) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeNamespaceInterface) ListArgsForCall(i int) api.ListOptions {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].opts
}

func (fake *FakeNamespaceInterface) ListReturns(result1 *api.NamespaceList, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *api.NamespaceList
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) Delete(name string) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Delete", []interface{}{name})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(name)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeNamespaceInterface) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeNamespaceInterface) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].name
}

func (fake *FakeNamespaceInterface) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespaceInterface) Update(item *api.Namespace) (*api.Namespace, error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		item *api.Namespace
	}{item})
	fake.recordInvocation("Update", []interface{}{item})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(item)
	} else {
		return fake.updateReturns.result1, fake.updateReturns.result2
	}
}

func (fake *FakeNamespaceInterface) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeNamespaceInterface) UpdateArgsForCall(i int) *api.Namespace {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].item
}

func (fake *FakeNamespaceInterface) UpdateReturns(result1 *api.Namespace, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *api.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) Watch(opts api.ListOptions) (watch.Interface, error) {
	fake.watchMutex.Lock()
	fake.watchArgsForCall = append(fake.watchArgsForCall, struct {
		opts api.ListOptions
	}{opts})
	fake.recordInvocation("Watch", []interface{}{opts})
	fake.watchMutex.Unlock()
	if fake.WatchStub != nil {
		return fake.WatchStub(opts)
	} else {
		return fake.watchReturns.result1, fake.watchReturns.result2
	}
}

func (fake *FakeNamespaceInterface) WatchCallCount() int {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return len(fake.watchArgsForCall)
}

func (fake *FakeNamespaceInterface) WatchArgsForCall(i int) api.ListOptions {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return fake.watchArgsForCall[i].opts
}

func (fake *FakeNamespaceInterface) WatchReturns(result1 watch.Interface, result2 error) {
	fake.WatchStub = nil
	fake.watchReturns = struct {
		result1 watch.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) Finalize(item *api.Namespace) (*api.Namespace, error) {
	fake.finalizeMutex.Lock()
	fake.finalizeArgsForCall = append(fake.finalizeArgsForCall, struct {
		item *api.Namespace
	}{item})
	fake.recordInvocation("Finalize", []interface{}{item})
	fake.finalizeMutex.Unlock()
	if fake.FinalizeStub != nil {
		return fake.FinalizeStub(item)
	} else {
		return fake.finalizeReturns.result1, fake.finalizeReturns.result2
	}
}

func (fake *FakeNamespaceInterface) FinalizeCallCount() int {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return len(fake.finalizeArgsForCall)
}

func (fake *FakeNamespaceInterface) FinalizeArgsForCall(i int) *api.Namespace {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return fake.finalizeArgsForCall[i].item
}

func (fake *FakeNamespaceInterface) FinalizeReturns(result1 *api.Namespace, result2 error) {
	fake.FinalizeStub = nil
	fake.finalizeReturns = struct {
		result1 *api.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) Status(item *api.Namespace) (*api.Namespace, error) {
	fake.statusMutex.Lock()
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		item *api.Namespace
	}{item})
	fake.recordInvocation("Status", []interface{}{item})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub(item)
	} else {
		return fake.statusReturns.result1, fake.statusReturns.result2
	}
}

func (fake *FakeNamespaceInterface) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeNamespaceInterface) StatusArgsForCall(i int) *api.Namespace {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.statusArgsForCall[i].item
}

func (fake *FakeNamespaceInterface) StatusReturns(result1 *api.Namespace, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 *api.Namespace
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespaceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNamespaceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ unversioned.NamespaceInterface = new(FakeNamespaceInterface)
