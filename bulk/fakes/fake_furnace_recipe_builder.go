// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/nsync/recipebuilder"
	"github.com/cloudfoundry-incubator/runtime-schema/cc_messages"
	"k8s.io/kubernetes/pkg/api/v1"
)

type FakeFurnaceRecipeBuilder struct {
	BuildReplicationControllerStub        func(*cc_messages.DesireAppRequestFromCC) (*v1.ReplicationController, error)
	buildReplicationControllerMutex       sync.RWMutex
	buildReplicationControllerArgsForCall []struct {
		arg1 *cc_messages.DesireAppRequestFromCC
	}
	buildReplicationControllerReturns struct {
		result1 *v1.ReplicationController
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFurnaceRecipeBuilder) BuildReplicationController(arg1 *cc_messages.DesireAppRequestFromCC) (*v1.ReplicationController, error) {
	fake.buildReplicationControllerMutex.Lock()
	fake.buildReplicationControllerArgsForCall = append(fake.buildReplicationControllerArgsForCall, struct {
		arg1 *cc_messages.DesireAppRequestFromCC
	}{arg1})
	fake.recordInvocation("BuildReplicationController", []interface{}{arg1})
	fake.buildReplicationControllerMutex.Unlock()
	if fake.BuildReplicationControllerStub != nil {
		return fake.BuildReplicationControllerStub(arg1)
	} else {
		return fake.buildReplicationControllerReturns.result1, fake.buildReplicationControllerReturns.result2
	}
}

func (fake *FakeFurnaceRecipeBuilder) BuildReplicationControllerCallCount() int {
	fake.buildReplicationControllerMutex.RLock()
	defer fake.buildReplicationControllerMutex.RUnlock()
	return len(fake.buildReplicationControllerArgsForCall)
}

func (fake *FakeFurnaceRecipeBuilder) BuildReplicationControllerArgsForCall(i int) *cc_messages.DesireAppRequestFromCC {
	fake.buildReplicationControllerMutex.RLock()
	defer fake.buildReplicationControllerMutex.RUnlock()
	return fake.buildReplicationControllerArgsForCall[i].arg1
}

func (fake *FakeFurnaceRecipeBuilder) BuildReplicationControllerReturns(result1 *v1.ReplicationController, result2 error) {
	fake.BuildReplicationControllerStub = nil
	fake.buildReplicationControllerReturns = struct {
		result1 *v1.ReplicationController
		result2 error
	}{result1, result2}
}

func (fake *FakeFurnaceRecipeBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildReplicationControllerMutex.RLock()
	defer fake.buildReplicationControllerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFurnaceRecipeBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ recipebuilder.FurnaceRecipeBuilder = new(FakeFurnaceRecipeBuilder)
